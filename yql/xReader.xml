<?xml version="1.0" encoding="UTF-8"?>
<table xmlns:i="http://query.yahooapis.com/v1/schema/internalTable.xsd" xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author> Marcel Duran / SD05 </author>
        <description>request a URL and retrieves its content and headers. See Document.</description>
        <documentationURL>https://github.com/kincrew/xReader/wiki</documentationURL>
        <documentationURL>https://github.com/kincrew/xReader/xReader.kor.html</documentationURL>
        <documentationURL>http://bootleg.egloos.com/321865</documentationURL>
        <sampleQuery>select * from {table} where url="www.yahoo.com/"</sampleQuery>
    </meta>
    <bindings>
        <select itemPath="" produces="XML">
            <inputs>
				<key id="authorization"   type="xs:string" paramType="variable" required="false"/>
				<key id="charset"         type="xs:string" paramType="variable" required="false"/>
				<key id="content"         type="xs:string" paramType="variable" required="false"/>
				<key id="contenttype"     type="xs:string" paramType="variable" required="false"/>
				<key id="cookie"          type="xs:string" paramType="variable" required="false"/>
				<key id="css"             type="xs:string" paramType="variable" required="false"/>
				<key id="fallbackCharset" type="xs:string" paramType="variable" required="false" default="utf-8, euc-kr, iso-8859-1"/>
				<key id="forceCharset"    type="xs:string" paramType="variable" required="false"/>
				<key id="headers"         type="xs:string" paramType="variable" required="false"/>
				<key id="method"          type="xs:string" paramType="variable" required="false"/>
				<key id="param"           type="xs:string" paramType="variable" required="false"/>
				<key id="referer"         type="xs:string" paramType="variable" required="false"/>
				<key id="tidy"            type="xs:string" paramType="variable" required="false"/>
				<key id="timeout"         type="xs:string" paramType="variable" required="false"/>
				<key id="ua"              type="xs:string" paramType="variable" required="false"/>
				<key id="url"             type="xs:string" paramType="variable" required="true"/>
				<key id="xpath"           type="xs:string" paramType="variable" required="false"/>
            </inputs>
            <execute>
                <![CDATA[
					var location, 
						JSON,
						version = "0.0.4",
						method  = method || "get",
						hdCase  = function(s) {return s.replace(/(^|\-)(\w)/g, function(a,b,c) { return b+c.toUpperCase()})};
						isArray = function(o) {return Object.prototype.toString.call(o) == "[object Array]"}
					;

					var headerToXML = function(object) {					
						var headers = <headers></headers>;
						var tag;
						for (var header in object) {
							tag = hdCase(header);
							var headerValue = object[header];
							if (typeof headerValue == "object") {
								if (isArray(headerValue)) {
									for (var i=0 ; i < headerValue.length ; i++) {
										headers.headers += <{tag}>{headerValue[i]}</{tag}>;
									}
								} else {								
									var _tag = <{tag}/>;
									for (var i in headerValue) _tag += <{i}>{headerValue[i]}</{i}>;
									headers.headers += _tag;
								}
							}
							else headers.headers += <{tag}>{headerValue}</{tag}>;
						}
						return headers;
					}

					// PREPARING REQUEST
					url = /^http[s]?:\/\//.test(url) ? url : "http://" + url;
					var request = y.rest(url);
					request.header('Accept-Encoding', 'gzip,deflate');
					request.decompress(true);

					if (ua) request.header('User-Agent', ua);
					if (authorization) request.header('Authorization', authorization);
					if (contenttype) request.contentType(contenttype); 
					if (cookie) request.header('Cookie', cookie);
					if (forceCharset) request.forceCharset(forceCharset);
					else request.fallbackCharset(fallbackCharset);
					if (headers) {
						var headers = y.xparseJson(headers);
						for (var key in headers) request.header(key, headers[key]);
					}
					if (param) {
						var param = y.xparseJson(param);
						for (var key in param) request.query(key, param[key]);
					}
					if (referer) request.header('Referer', referer);
					if (timeout) request.timeout(timeout);
					
					// SENDING HTTP REQUEST
					var resp ;
					if (method == "get")       resp = request.get();
					else if (method == "post") resp = request.post(content);
					else if (method == "put")  resp = request.put(content);
					else if (method == "head") resp = request.head();

					// RECIEVING DATA
					y.log('response length: ' + (resp.response && resp.response.length));
					var data = <resources/>;
					var redirect = y.diagnostics.redirect;
					var count = redirect && redirect.length();
					if (count) {
						for (var i = 0; i < count; i += 1) {
							var redir = redirect[i];
							y.log('redirect: ' + redir.@status + ' = ' + redir.toString());
							location = redir.toString();
							if (location) {
								data.resources +=
									<redirect>
										<url>{url}</url>
										<status>{redir.@status}</status>
										<headers>
											<Location>{location}</Location>
										</headers>
									</redirect>;
								url = location;
							}
						}
					}

					// set result
					data.resources += <version>{version}</version>;
					data.resources += <url>{url}</url>;
					data.resources += <status>{resp.status}</status>;
					data.resources += headerToXML(resp.headers);

					// get uncompressed response content for non-binary
					var header = resp.headers;
					var content;
					header = (header && header['content-type']) || '';
					if (header.indexOf('image') && header.indexOf('x-shockwave-flash') < 0) {
						try {
							content = resp.response;
						} catch (err) {
							y.log(err);
							content = '';
						}
					} else content = '';
					if (xpath || css) {
						if (css) {
							y.include("http://css2xpath.googlecode.com/svn/trunk/build/css2xpath.min.js");
							var xpath = css2xpath(css);
						}
						content = y.xpath(y.tidy(content), xpath);
						data.resources += <length>{content.length()}</length>;
						if (!tidy) content = content.toXMLString();
					}
					if (tidy && (typeof content != "xml")) content = y.tidy(content);
					else if (!tidy && typeof content == "xml") content = content.toXMLString();
					data.resources += <content>{content}</content>;
					response.maxAge = 300;
					response.object = data;
                ]]>
            </execute>
        </select>
    </bindings>
</table>